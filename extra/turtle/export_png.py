"""Export your turtle art to PNG. It ask GhostScript to convert eps script (
generated by tk canvas) to PNG."""
import turtle
import re
import sys
import subprocess
import turtleext
from io import StringIO
from tsi.evaluator import Evaluator
from tsi.expression import theNil


load_ext_pattern = re.compile(r'^\s*\(\s*load-ext\s*"turtleext"\s*\).*')


# patch_turtle_ext
turtleext.exitonclick = lambda *__: theNil


def postscript2png(ps):
    args = ['gs', '-q', '-dSAFER', '-sDEVICE=pngalpha', '-dEPSCrop', '-r144',
            '-dTextAlphaBits=4', '-dGraphics', '-dAlphaBits=4', '-sOutputFile=-', '-']
    p = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    png_bytes = p.communicate(ps.encode('utf-8'))[0]
    return png_bytes


def exec_script(script):
    turtle_used = False
    for l in script.split('\n'):
        if load_ext_pattern.match(l):
            turtle_used = True
            break

    if turtle_used:
        turtle.speed(10)
        turtle.tracer(1000)

    origin_stdout = sys.stdout
    out = sys.stdout = StringIO()
    evaluator = Evaluator()
    evaluator.eval(script)
    sys.stdout = origin_stdout

    image = None
    if turtle_used:
        turtle.tracer(1)  # hide turtle appropriately
        turtle.hideturtle()
        image = postscript2png(turtle.getscreen().getcanvas().postscript())
        turtle.reset()
    out.seek(0)
    return out.read(), image


if __name__ == '__main__':
    with open('hax.scm') as f:
        __, image = exec_script(f.read())
    with open('hax.png', 'wb') as f:
        f.write(image)
